---
title:  "파이썬스럽게 프로그래밍하기"
excerpt: "문자열, zip함수를 Pythonic하게"

categories:
  - Blog
tags:
  - [Blog, TIL, 생각]

toc: true
toc_sticky: true
 
date: 2021-07-10
last_modified_at: 2021-07-10


---

> 이 글은 프로그래머스의 '파이썬을 파이썬답게' 수업을 참고하여 작성하였습니다.

[수업보기](https://programmers.co.kr/learn/courses/4008) 

## 문자열 정렬하기

문자열 정렬하기

**예제**

```python
s = 'co1dtype'
n = 24

s.ljust(n) # 좌측 정렬
s.center(n) # 가운데 정렬
s.rjust(n) # 우측 정렬
```

**결과**

```python
co1dtype
        co1dtype
                co1dtype
```

**format string을 활용한 문자열 정렬**

```python
s = 'co1dtype'
n = 24

for align in '<^>':
    print('{:{align}{width}}'.format(s, align=align, width=n))
```

**글자 수가 10칸일 때**

| 왼쪽 정렬  | 가운데 정렬 | 오른쪽 정렬 |
| ---------- | ----------- | :---------: |
| {문자:<10} | {문자:^10}  | {문자:>10}  |

## 알파벳 출력하기

a~z까지 출력하려고 한다.

일반적인 풀이

```python
print('abcdefghijklmnopqrstuvwxyz')
```

파이썬 string 라이브러리 사용

```python
import string 

string.ascii_lowercase # 소문자 abcdefghijklmnopqrstuvwxyz
string.ascii_uppercase # 대문자 ABCDEFGHIJKLMNOPQRSTUVWXYZ
string.ascii_letters # 대소문자 모두 abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
string.digits # 숫자 0123456789
```

## 원본을 유지한채, 정렬된 리스트 구하기

[올바르게 리스트를 복사하는 법](https://co1dtype.github.io/python/array3/)을 읽고 오면 좋다.

원본 순서를 변경하지 않고, 정렬된 값을 구하는 방법

일반적인 풀이

```python
list1 = [3, 2, 1]
list2 = [i for i in list1] # 또는 copy.deepcopy를 사용
list2.sort()
```

하지만, 파이썬에서는 원본을 유지한채 정렬된 리스트를 구하는 함수가 존재한다.

```python
list1 = [3, 2, 1]
list2 = sorted(list1)
```

## 2차원 리스트 뒤집기

![코드업_1462](https://user-images.githubusercontent.com/76248669/125142229-36ecf980-e152-11eb-9b61-db962737c509.png)

[Codeup 1462 풀어보기](https://codeup.kr/problem.php?id=1462)

**일반적인 풀이**(3*3 배열일 때)

```python
num=1
for i in range(3):
    print(num, end=" ")
    for j in range(1,3):
        print(num + j * n, end=" ")
    print("")
    num+=1
```

**결과**

```python
1 4 7 
2 5 8
3 6 9
```

**zip 함수 활용하기**

```python
mylist = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
new_list = list(map(list, zip(*mylist)))

for i in new_list: # 출력
    for j in i:
        print(j, end=" ")
    print("")
```

## zip 함수 활용하기

**예제1** 여러 개의 Iterable 동시에 순회할 때 사용

```python
list1 = [1, 2, 3, 4]
list2 = [100, 120, 30, 300]
list3 = [392, 2, 33, 1]
answer = []
for number1, number2, number3 in zip(list1, list2, list3):
   print(number1 + number2 + number3)
```

**결과** 

```python
493
124
66
305
```

**예제2** Key 리스트와 Value 리스트로 딕셔너리 생성하기

```python
animals = ['cat', 'dog', 'lion']
sounds = ['meow', 'woof', 'roar']
answer = dict(zip(animals, sounds)) # {'cat': 'meow', 'dog': 'woof', 'lion': 'roar'}
```



## 2차원 리스트를 1차원 리스트로 만들기

```python
my_list = [[1, 2], [3, 4], [5, 6]]

# 방법 1 - sum 함수
answer = sum(my_list, [])

# 방법 2 - itertools.chain
import itertools
list(itertools.chain.from_iterable(my_list))

# 방법 3 - itertools와 unpacking
import itertools
list(itertools.chain(*my_list))

# 방법 4 - list comprehension 이용
[element for array in my_list for element in array]

# 방법 5 - reduce 함수 이용 1
from functools import reduce
list(reduce(lambda x, y: x+y, my_list))

# 방법 6 - reduce 함수 이용 2
from functools import reduce
import operator
list(reduce(operator.add, my_list))
```

각 원소의 길이가 동일한 경우에만 사용 가능한 방법

```python
import numpy as np
np.array(my_list).flatten().tolist()
```

**ex>**

가능한 리스트

- `[[1], [2]]`

- `[[1, 2], [2, 3], [4, 5]]`

불가능한 리스트

- `[['A', 'B'], ['X', 'Y'], ['1’]]`



## i번째 원소와 i+1번째 원소 - zip

![코드업_1496](https://user-images.githubusercontent.com/76248669/125142238-3bb1ad80-e152-11eb-9a41-b54f18ac3a75.png)

[Codeup 1496 풀어보기](https://codeup.kr/problem.php?id=1496)

n(짝수)개의 데이터므로 2개씩 짝지어 비교해 새 리스트에 넣어주면 풀리는 문제다.

일반적인 풀이

```python
n = int(input())
li = list(map(int, input().split()))

for i in range(0, len(li), 2):
    print(li[i] if li[i]<li[i+1] else li[i+1], end=" ")
```

`zip` 함수 활용

```python
n = int(input())
board = [int(x) for x in input().strip().split()]

for num1, num2 in zip(board[::2], board[1::2]):
    print(num1 if num1<num2 else num2, end=" ")
```

![progammers_ii](https://user-images.githubusercontent.com/76248669/125142249-41a78e80-e152-11eb-94c0-6126cfcb778a.png)

(리스트의 길이 - 1) 만큼 반복해서 연산해주고 새 리스트에 넣어주면 풀린다.

일반적인 풀이

```python
def solution(mylist):
    answer = []
    for i in range(len(mylist)-1):
        answer.append(abs(mylist[i] - mylist[i+1]))
    return answer

if __name__ == '__main__':
    mylist = [83, 48, 13, 4, 71, 11]    
    print(solution(mylist))
```

`zip` 함수 활용

```python
def solution(mylist):
    answer = []
    for number1, number2 in zip(mylist, mylist[1:]):
        answer.append(abs(number1 - number2))
    return answer

if __name__ == '__main__':
    mylist = [83, 48, 13, 4, 71, 11]    
    print(solution(mylist))
```

## 모든 멤버의 type 변환하기

문자열 리스트 `['1', '100', '123']` 가 있다고 생각해보자.

이 리스트의 원소들을 모두 정수형으로 변경하고 싶다. 

어떻게 해야할까?



일반적인 풀이

```python
mylist = ['1', '100', '123']
answer = []
for value in mylist:
    answer.append(int(value))
```

`map`함수를 활용

```python
mylist = ['1', '100', '123']
answer = map(int, mylist)
```

## sequence 멤버를 하나로 이어붙이기

**문제1**. 문자열 리스트를 입력받아 원소들을 모두 이어붙인 문자열을 출력하는 프로그램을 제작하여라.

**출력**

```python
110033 #  ['1', '100', '33'] 일 때 출력
```

**일반적인 풀이**

```python
mylist = ['1', '100', '33']
for i in mylist:
    print(i, end="")
```

`join` 함수 활용

```python
mylist = ['1', '100', '33']
print("".join(mylist))
```

**문제2**. 문자열 리스트를 입력받아 원소들을 '_'로 구분해 모두 이어붙인 문자열을 출력하는 프로그램을 제작하여라.

**출력**

```python
I_love_you   # ['I', 'love', 'you'] 일 때 출력
```

`join` 함수 활용

```python
mylist = ['I', 'love', 'you']
print('_'.join(mylist)) # ('구분자').join(리스트)
```

## 별찍기

![코드업 1353](https://user-images.githubusercontent.com/76248669/125142262-49673300-e152-11eb-96c2-90b9c169192d.png)

[Codeup 1353 풀어보기](https://codeup.kr/problem.php?id=1353)

**일반적인 풀이**

```python
n = int(input())
for i in range(1,n+1):
    for j in range(i):
        print("*", end="")
    print("")
```

`*` 연산자를 통한 풀이

```python
n = int(input())
for i in range(1,n+1):
    print('*'*i)
```

#### 곱집합(Cartesian product) 구하기

곱집합을 구하는 프로그램을 작성하여라.

ex> 두 스트링 'ABCD', 'xy' 의 곱집합은 Ax Ay Bx By Cx Cy Dx Dy

**일반적인 풀이**

```python
iterable1 = 'ABCD'
iterable2 = 'xy'
iterable3 = '1234'

for value1 in iterable1:
    for value2 in iterable2:
        for value3 in iterable3:
            print(value1, value2, value3)
```

[`itertools.product`](https://docs.python.org/3/library/itertools.html#itertools.product)사용

```
import itertools

iterable1 = 'ABCD'
iterable2 = 'xy'
iterable3 = '1234'
print(list(itertools.product(iterable1, iterable2, iterable3)))
```

## 순열과 조합

모든 경우의 수를  출력하는 프로그램을 작성해보자

ex>  'A', 'B', 'C'로 만들 수 있는 경우의 수 -> 'ABC', 'ACB', 'BAC', 'BCA', 'CAB', 'CBA'

[`itertools.permutation`](https://docs.python.org/3/library/itertools.html#itertools.permutations) 사용

```python
import itertools

pool = ['A', 'B', 'C']
print(list(map(''.join, itertools.permutations(pool)))) # 3개의 원소로 수열 만들기
print(list(map(''.join, itertools.permutations(pool, 2)))) # 2개의 원소로 수열 만들기
```

## 가장 많이 등장하는 문자찾기

**일반적인 풀이**

```
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 7, 9, 1, 2, 3, 3, 5, 2, 6, 8, 9, 0, 1, 1, 4, 7, 0]
answer = {}
for number in my_list:
    try:
        answer[number] += 1
    except KeyError:
        answer[number] = 1

print(answer[1]) # = 4
print(answer[3])  # = 3
print(answer[100])  # =  raise KeyError
```

파이썬의 `collections.Counter` 클래스 사용 

```python
import collections
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 7, 9, 1, 2, 3, 3, 5, 2, 6, 8, 9, 0, 1, 1, 4, 7, 0]
answer = collections.Counter(my_list)

print(answer[1]) # = 4
print(answer[3])  # = 3
print(answer[100]) # = 0
```

## for 문과 if문을 한번에

홀수면 그대로, 짝수면 제곱을 해 출력하는 프로그램을 작성해보자

ex> [3, 2, 6, 7]  → [4, 36]

**일반적인 풀이**

```python
mylist = [3, 2, 6, 7]
answer = []
for number in mylist:
    if number % 2 == 0:
        answer.append(number**2) # 들여쓰기를 두 번 함
```

파이썬의 `list comprehension`을 사용

```python
mylist = [3, 2, 6, 7]
answer = [number**2 for number in mylist if number % 2 == 0]
```

BNF 문법이 이해되지 않는다면 [Displays for lists, sets and dictionaries](https://docs.python.org/3/reference/expressions.html?highlight=list%20comprehension#displays-for-lists-sets-and-dictionaries) 을 읽어보세요.

## flag 대신 for-else 사용하기

숫자 5개를 입력받고 그 중 제곱수가 있다면 `found`, 없다면 `not found`를 출력하는 프로그램을 작성하시오.

**입력1**

```python
2
4
2
5
1
```

**결과**

```python
found
```

**일반적인 풀이**

```python
import math

if __name__ == '__main__':
    numbers = [int(input()) for _ in range(5)]
    multiplied = 1
    flag = True
    for number in numbers:
        multiplied *= number
        if math.sqrt(multiplied) == int(math.sqrt(multiplied)):
            flag = False
            print('found')
            break

    if flag:
        print('not found')
```

flag를 쓰지 않고 for-else 문을 사용

```python
import math

if __name__ == '__main__':
    numbers = [int(input()) for _ in range(5)]
    multiplied = 1
    for number in numbers:
        multiplied *= number
        if math.sqrt(multiplied) == int(math.sqrt(multiplied)):
            print('found')
            break
    else:
        print('not found')
```

## 클래스 인스턴스 출력하기 - class의 자동 string casting

예) 2차원 평면 위를 나타내는 인스턴스를 `(x값, y값)`으로 출력하기

```python
class Coord(object):
    def __init__(self, x, y):
        self.x, self.y = x, y

point = Coord(1, 2)
print( '({}, {})'.format(point.x, point.y) ) 
# (1, 2)

# 또는
def print_coord(coord):
    print( '({}, {})'.format(coord.x, coord.y) )
print_coord(point)
# (1, 2)
```

`__str__` 매소드를 사용해 출력 format 지정

```python
class Coord(object):
    def __init__ (self, x, y):
        self.x, self.y = x, y
    def __str__ (self):
        return '({}, {})'.format(self.x, self.y)

point = Coord(1, 2)
# (1, 2)
```

## 최댓값과 최솟값 표현하기

c언어에서는 다음과 같이 최댓값과 최솟값을 표현합니다.

```c
#include <stdio.h>
#include <limits.h>    // 자료형의 최댓값과 최솟값이 정의된 헤더 파일

int main()
{
    char num1 = CHAR_MIN;          // char의 최솟값
    short num2 = SHRT_MIN;         // short의 최솟값
    int num3 = INT_MIN;            // int의 최솟값
    long num4 = LONG_MIN;          // long의 최솟값
    long long num5 = LLONG_MIN;    // long long의 최솟값

    printf("%d %d %d %ld %lld\n", num1, num2, num3, num4, num5);
    // -128 -32768 -2147483648 -2147483648 -9223372036854775808

    return 0;
}
```

python에서 최댓값과 최솟값은 어떻게 표현할까요?

이떄  `inf`를 사용합니다.

```python
min_val = float('inf')
max_val = float('-inf')
```

